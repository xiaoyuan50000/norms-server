#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('norms-server-dev:server');
var http = require('http');
const log = require('../winston/logger').logger('www');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create HTTPS server.
 */
// const options = {
//   key: fs.readFileSync('./certificates/key.pem', 'utf8'),
//   cert: fs.readFileSync('./certificates/cert.pem', 'utf8'),

// }
// var httpsServer = https.createServer(options, app);

// httpsServer.listen(port);
// httpsServer.on('error', onError);
// httpsServer.on('listening', function onListening() {
//   let addr = httpsServer.address();
//   let bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   log.info('Listening on ' + bind);
//   console.log('Listening on ' + bind);
// });




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    log.info('Listening on ' + bind);
}
